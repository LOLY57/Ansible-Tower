---

AWSTemplateFormatVersion: '2010-09-09'
Description: Parameters For MyfullInfra

Parameters:
    VpcCIDR:
     Default: 10.0.0.0/16
     Description: Please enter the IP Range for this VPC
     Type: String

    PublicSubnet1CIDR:
      Default: 10.0.0.0/24
      Description: Please enter the IP Range for the public subnet 1
      Type: String

    PublicSubnet2CIDR:
      Default: 10.0.1.0/24
      Description: Please enter the IP Range for the public subnet 2
      Type: String

    PrivateSubnet1CIDR:
      Default: 10.0.2.0/24
      Description: Please enter the IP Range for the private subnet 1
      Type: String

    PrivateSubnet2CIDR:
      Default: 10.0.3.0/24
      Description: Please enter the IP Range for the private subnet 2
      Type: String


    SubnetAvailabilityZones:
      Type: List<AWS::EC2::AvailabilityZone::Name>
      Description: Select the two availability zones where the resources should be launched
      Default: "us-east-1a,us-east-1b"
      AllowedValues: 
        - us-east-1a
        - us-east-1b
        - us-east-1d
        - us-east-1e 
        - us-east-1f
      ConstraintDescription: Please select exactly two 
      

    InstanceType: 
      Description: Webserver EC2 Instance Type 
      Type: String
      Default: t2.micro
      AllowedValues:
        - t2.micro
        - t2.nano
        - t2.small
        - t2.medium

    AMIID:
      Description: The EC2 AMI id
      Type: String
      Default: ami-00c39f71452c08778 
      ConstraintDescription: Must be a valid AMI based on the region

    InstanceUserData:
      Type: String
      Description: User data to run on the EC2 Instances
      AllowedPattern: '[\s\S]*'
      ConstraintDescription: Must be a valid user data script content
      Default: | 
          #!/bin/bash
          # get admin privileges
          sudo su
          # install httpd
          yum update -y
          yum install -y httpd.x86_64
          systemctl start httpd.service
          systemctl enable httpd.service
          echo "Hello, World!" > index.html
         


    SSHLocation:
      AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
      ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
      Default: 0.0.0.0/0
      Description: The IP address range that can be used to access the web server using SSH.
      MaxLength: '18'
      MinLength: '9'
      Type: String

    KeyName:
      Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
      Type: AWS::EC2::KeyPair::KeyName
      ConstraintDescription: must be the name of an existing EC2 KeyPair.

    SecurityGroupIngressPorts:
      Type: List<Number>
      Description: List of ingress ports to open on the security group.
      Default: "80,22,443"
      AllowedValues: [80, 22, 443, 8080, 8443] # optional, add any additional allowed port numbers


Resources:

  #Create VPC
  AnsibleTowerVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Ansible Tower VPC

# Create Internet Gateway
  AnsibleInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Ansible IGW

# Attach Internet Gateway to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref AnsibleInternetGateway
      VpcId: !Ref AnsibleTowerVPC

# Create Public Subnet1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !Ref SubnetAvailabilityZones ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1
      VpcId: !Ref  AnsibleTowerVPC

# Create Public Subnet2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !Ref SubnetAvailabilityZones ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2
      VpcId: !Ref AnsibleTowerVPC

# Create Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Public Route Table
      VpcId: !Ref AnsibleTowerVPC

# Add a Public Route to the Route Table
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref AnsibleInternetGateway
      RouteTableId: !Ref PublicRouteTable

# Associate Public Subnet1 with Public Route Table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

# Associate Public Subnet2 with Public Route Table
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

# Create Private Subnet1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !Ref SubnetAvailabilityZones ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet1
      VpcId: !Ref AnsibleTowerVPC

# Create Private Subnet2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !Ref SubnetAvailabilityZones ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet2
      VpcId: !Ref AnsibleTowerVPC

  
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow incoming traffic to ports 80, 22 and 443
      VpcId: !Ref AnsibleTowerVPC
      SecurityGroupIngress:

        - IpProtocol: tcp
          FromPort: !Select [0, !Ref SecurityGroupIngressPorts]
          ToPort: !Select [0, !Ref SecurityGroupIngressPorts]
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: !Select [1, !Ref SecurityGroupIngressPorts]
          ToPort: !Select [1, !Ref SecurityGroupIngressPorts]
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: !Select [2, !Ref SecurityGroupIngressPorts]
          ToPort: !Select [2, !Ref SecurityGroupIngressPorts]
          CidrIp: 0.0.0.0/0


  MyInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref AMIID # replace with your desired Amazon Machine Image (AMI) ID
      KeyName: !Ref KeyName  # replace with your desired key pair name
      SecurityGroupIds:
        - Fn::GetAtt: ["MySecurityGroup", "GroupId"] 
      
      SubnetId: !Ref PublicSubnet1
      UserData: !Ref InstanceUserData 